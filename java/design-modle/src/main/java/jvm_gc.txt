引用计数法:  给对象添加一个引用计数器,每当有一个地方引用,计算器就加一1,当引用失效了,计数器就减一.任何时候,只要这个计数器是0的对象就是补可能再被使用.
           问题: 难以处理对象之前循环引用的问题,如果是有循环引用的话,那么相互引用的对象就回收不了了.

------
可达性分析算法:
        GC Root的对象作为起点,从这些节点开始向下搜索,节点所走过的路径称为引用链,
               当一个对象到GC Root没有任何引用链的话,则证明此对象不可用.
        GC Root: 类加载器/Thread/虚拟机栈的本地变量/static成员/常量引用/本地方法栈等
        该类所有的实例都已经被回收,也就是Java堆中不存在该类的任何实例.
        加载该类的ClassLoader已经被回收
        该类对应的java.lang.Class对象没有在任何地方被引用,无法在任何地方通过反射该类的方法.

------------
垃圾回收算法:   复制算法/标记-清除算法/标记-整理算法/分代回收算法
标记清除: 标记出所有需要回收的对象,在标记完成后统一回收所有被标记的对象.
         Note: 效率问题,标记和清除两个过程的效率都不高. 空间问题:标记清除后会产生大量不连续的碎片.
复制算法: 把内存分为大小相同的二块,每次只使用其中的一块,当这块使用完了后,就将还存活的地方复制到宁外一块区域,
         然后再把使用的空间一次清理掉.这样就使每次内存回收的对象是对内存区间的一半的回收.
标记-整理算法: 根据老年代的特点提出的一种标记算法,标记过程和"标记-清除"算法一样,
             但是后续的步骤不是直接对可回收对象进行回收，而是让所有的存活对象向一段移动,然后直接清理掉边界
             以外的内存.
分代收集算法: 根据对象存活的周期的不同j将内存划分为几块. 一般将java堆分为新生代和老年代,
            这样我们就可以根据各个年代的特点选择合适的垃圾收集算法.
            在新生代,每次收集都有大量的对象死去,可以选择复制算法,只需要少量的对象的复制成本就可以完成每次
            垃圾收集.而老年代的对象存活几率比较高时,而且没有额外的空间对它进行分配担保,就必须选择"标记-清除"
            或者"标记-整理"算法进行垃圾收集.

------------------
Serial收集器: 串行收集器:只会使用一条垃圾收集线程去完成垃圾收集工作,更重要的是它在进行垃圾收集的时候必须暂停
                       其他工作线程(Stop The World).
PerNew收集器:  就是Serial多线程版本收集器.
Parallel Scavenge: 在于提供吞吐量(高效利用CPU).
CMS(Cuncurrent Mark Sweep): 一种以获取最短回收停顿时间为目标的收集器.符合在注重用户体验上.
                            并发收集,低停顿.
                            对CPU资源敏感,无法处理浮动垃圾,使用"标记-清除"算法会导致收集结束时会有大量空间碎片.

----------
并行: 指多条垃圾收集器并行工作,但此时用户线程处于等待状态.
并发: 指用户线程和垃圾收集线程同时执行(但不一定是并行,可能会交替执行),用户程序在继续运行,而垃圾收集器运行在宁外一个CPU.

------------------------
打印GC日志: -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:./gc.log
-Xss: 每个线程的栈大小
-Xms: 初始化堆大小,默认是物理内存的1/64
-Xmx: 最大堆大小,默认是物理内存的1/4
-Xmn: 新生代大小
-XX:NewSize: 设置新生代初始大小
-XX:SurvivorRatio: 默认8表示一个survivor区占用1/8的Eden内存,即1/10的新生代内存
-XX:MetaspaceSize:设置元空间大小
-XX:MaxMetaspaceSize:设置元空间最大允许大小，默认不受限制，JVM Metaspace会进行动态扩展.


-XX:+UseSerialGC:设置串行收集器
-XX:+UseParallelGC:设置并行收集器
-XX:+UseParallelOldGC:老年代使用并行回收收集器
-XX:+UseParNewGC:在新生代使用并行收集器
-XX:+UseParalledlOldGC:设置并行老年代收集器
-XX:+UseConcMarkSweepGC:设置CMS并发收集器
-XX:+UseG1GC:设置G1收集器
-XX:ParallelGCThreads:设置用于垃圾回收的线程数

CMS收集器设置
-XX:+UseConcMarkSweepGC:设置CMS并发收集器
-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。
-XX:ParallelGCThreads:设置并发收集器新生代收集方式为并行收集时，使用的CPU数。并行收集线程数。
-XX:CMSFullGCsBeforeCompaction:设定进行多少次CMS垃圾回收后，进行一次内存压缩
-XX:+CMSClassUnloadingEnabled:允许对类元数据进行回收
-XX:UseCMSInitiatingOccupancyOnly:表示只在到达阀值的时候，才进行CMS回收
-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况
-XX:ParallelCMSThreads:设定CMS的线程数量
-XX:CMSInitiatingOccupancyFraction:设置CMS收集器在老年代空间被使用多少后触发
-XX:+UseCMSCompactAtFullCollection:设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理

G1收集器设置
-XX:+UseG1GC:使用G1收集器
-XX:ParallelGCThreads:指定GC工作的线程数量
-XX:G1HeapRegionSize:指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区
-XX:GCTimeRatio:吞吐量大小，0-100的整数(默认9)，值为n则系统将花费不超过1/(1+n)的时间用于垃圾收集
-XX:MaxGCPauseMillis:目标暂停时间(默认200ms)
-XX:G1NewSizePercent:新生代内存初始空间(默认整堆5%)
-XX:G1MaxNewSizePercent:新生代内存最大空间
-XX:TargetSurvivorRatio:Survivor填充容量(默认50%)
-XX:MaxTenuringThreshold:最大任期阈值(默认15)
-XX:InitiatingHeapOccupancyPercen:老年代占用空间超过整堆比IHOP阈值(默认45%),超过则执行混合收集
-XX:G1HeapWastePercent:堆废物百分比(默认5%)
-XX:G1MixedGCCountTarget:参数混合周期的最大总次数(默认8)

