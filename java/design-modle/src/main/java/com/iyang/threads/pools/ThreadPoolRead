    execute 方法.

    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        /*
         * Proceed in 3 steps:
         *
         * 1. If fewer than corePoolSize threads are running, try to
         * start a new thread with the given command as its first
         * task.  The call to addWorker atomically checks runState and
         * workerCount, and so prevents false alarms that would add
         * threads when it shouldn't, by returning false.
         *
         * 2. If a task can be successfully queued, then we still need
         * to double-check whether we should have added a thread
         * (because existing ones died since last checking) or that
         * the pool shut down since entry into this method. So we
         * recheck state and if necessary roll back the enqueuing if
         * stopped, or start a new thread if there are none.
         *
         * 3. If we cannot queue task, then we try to add a new
         * thread.  If it fails, we know we are shut down or saturated
         * and so reject the task.
         */
        int c = ctl.get();
        // 判断是否小于核心线程数,如果是的话,直接新增work成功后直接退出来.
        if (workerCountOf(c) < corePoolSize) {
            if (addWorker(command, true))
                return;
            // 添加失败后继续获取标记
            c = ctl.get();
        }
        // 判断是运行状态并且丢到workQueue队列中去
        if (isRunning(c) && workQueue.offer(command)) {
            int recheck = ctl.get();
            // 再次 check 判断运行状态,如果是非运行状态的话就将其移除出去 @reject 掉
            if (! isRunning(recheck) && remove(command))
                reject(command);
            // 否则发现可能运行线程数是0,那么增加一个null的worker.
            else if (workerCountOf(recheck) == 0)
                addWorker(null, false);
        }
        // 直接增加 worker 如果不成功的话,直接reject.
        else if (!addWorker(command, false))
            reject(command);
    }


---------------------
    addWorker方法

    private boolean addWorker(Runnable firstTask, boolean core) {
        retry:
        for (;;) {
            int c = ctl.get();
            int rs = runStateOf(c);

            // Check if queue empty only if necessary.
            // 两种情况:  1.如果是非运行状态.  2:如果不是非运行状态,停止状态并且是null对象并且workQueue不等于null.
            if (rs >= SHUTDOWN &&
                ! (rs == SHUTDOWN &&
                   firstTask == null &&
                   ! workQueue.isEmpty()))
                return false;

            for (;;) {
                int wc = workerCountOf(c);
                if (wc >= CAPACITY ||
                    wc >= (core ? corePoolSize : maximumPoolSize))
                    // 判断是否包含容量了
                    return false;
                // 新增一个 work 数量, 然后跳出来.
                if (compareAndIncrementWorkerCount(c))
                    break retry;
                // 增加work 失败后继续递归
                c = ctl.get();  // Re-read ctl
                if (runStateOf(c) != rs)
                    continue retry;
                // else CAS failed due to workerCount change; retry inner loop
            }
        }

        boolean workerStarted = false;
        boolean workerAdded = false;
        Worker w = null;
        try {
            // 添加一个 worker
            w = new Worker(firstTask);
            final Thread t = w.thread;
            // 判断是否为null.
            if (t != null) {
                final ReentrantLock mainLock = this.mainLock;
                mainLock.lock();
                try {
                    // Recheck while holding lock.
                    // Back out on ThreadFactory failure or if
                    // shut down before lock acquired.
                    int rs = runStateOf(ctl.get());

                    if (rs < SHUTDOWN ||
                        (rs == SHUTDOWN && firstTask == null)) {
                        if (t.isAlive()) // precheck that t is startable
                            throw new IllegalThreadStateException();
                        workers.add(w);
                        int s = workers.size();
                        if (s > largestPoolSize)
                            largestPoolSize = s;
                        workerAdded = true;
                    }
                } finally {
                    mainLock.unlock();
                }
                if (workerAdded) {
                    t.start();
                    workerStarted = true;
                }
            }
        } finally {
            if (! workerStarted)
                addWorkerFailed(w);
        }
        return workerStarted;
    }


